generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean
  image         String?   @db.Text
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Customer {
  id        String             @id @default(uuid())
  name      String
  email     String             @unique
  phone     String?
  createdAt DateTime           @default(now())
  orders    Order[]
  campaigns CommunicationLog[]
}

model Order {
  id         String   @id @default(uuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  amount     Float
  createdAt  DateTime @default(now())
}

model Segment {
  id        String     @id @default(uuid())
  name      String
  ruleJson  Json
  audience  Json
  createdAt DateTime   @default(now())
  campaigns Campaign[]
}

model Campaign {
  id        String             @id @default(uuid())
  segment   Segment            @relation(fields: [segmentId], references: [id])
  segmentId String
  message   String
  createdAt DateTime           @default(now())
  logs      CommunicationLog[]
}

model CommunicationLog {
  id         String         @id @default(uuid())
  customer   Customer       @relation(fields: [customerId], references: [id])
  customerId String
  campaign   Campaign       @relation(fields: [campaignId], references: [id])
  campaignId String
  status     DeliveryStatus
  createdAt  DateTime       @default(now())
}

enum DeliveryStatus {
  SENT
  FAILED
  PENDING
}
